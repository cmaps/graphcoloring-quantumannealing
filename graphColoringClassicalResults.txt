--------------------------------------------------------------------

# GRAPH COLORING PROBLEM WITH n COLOURS ON CLASSICAL SOLVER #

--------------------------------------------------------------------
Array([[Binary(vc[0][0]), Binary(vc[0][1]), Binary(vc[0][2])],
       [Binary(vc[1][0]), Binary(vc[1][1]), Binary(vc[1][2])],
       [Binary(vc[2][0]), Binary(vc[2][1]), Binary(vc[2][2])],
       [Binary(vc[3][0]), Binary(vc[3][1]), Binary(vc[3][2])]])
--------------------------------------------------------------------
1st expression:
--------------------------------------------------------------------
(Const(exp1(0,0), (Binary(vc[0][0])*Binary(vc[0][1])))+Const(exp1(0,0), (Binary(vc[0][0])*Binary(vc[0][2])))+Const(exp1(0,1), (Binary(vc[0][1])*Binary(vc[0][0])))+Const(exp1(0,1), (Binary(vc[0][1])*Binary(vc[0][2])))+Const(exp1(0,2), (Binary(vc[0][2])*Binary(vc[0][0])))+Const(exp1(0,2), (Binary(vc[0][2])*Binary(vc[0][1])))+Const(exp1(1,0), (Binary(vc[1][0])*Binary(vc[1][1])))+Const(exp1(1,0), (Binary(vc[1][0])*Binary(vc[1][2])))+Const(exp1(1,1), (Binary(vc[1][1])*Binary(vc[1][0])))+Const(exp1(1,1), (Binary(vc[1][1])*Binary(vc[1][2])))+Const(exp1(1,2), (Binary(vc[1][2])*Binary(vc[1][0])))+Const(exp1(1,2), (Binary(vc[1][2])*Binary(vc[1][1])))+Const(exp1(2,0), (Binary(vc[2][0])*Binary(vc[2][1])))+Const(exp1(2,0), (Binary(vc[2][0])*Binary(vc[2][2])))+Const(exp1(2,1), (Binary(vc[2][1])*Binary(vc[2][0])))+Const(exp1(2,1), (Binary(vc[2][1])*Binary(vc[2][2])))+Const(exp1(2,2), (Binary(vc[2][2])*Binary(vc[2][0])))+Const(exp1(2,2), (Binary(vc[2][2])*Binary(vc[2][1])))+Const(exp1(3,0), (Binary(vc[3][0])*Binary(vc[3][1])))+Const(exp1(3,0), (Binary(vc[3][0])*Binary(vc[3][2])))+Const(exp1(3,1), (Binary(vc[3][1])*Binary(vc[3][0])))+Const(exp1(3,1), (Binary(vc[3][1])*Binary(vc[3][2])))+Const(exp1(3,2), (Binary(vc[3][2])*Binary(vc[3][0])))+Const(exp1(3,2), (Binary(vc[3][2])*Binary(vc[3][1])))+Const(exp1(3,2), ((Const(exp1(0,0), (Binary(vc[0][0])*Binary(vc[0][1])))+Const(exp1(0,0), (Binary(vc[0][0])*Binary(vc[0][2])))+Const(exp1(0,1), (Binary(vc[0][1])*Binary(vc[0][0])))+Const(exp1(0,1), (Binary(vc[0][1])*Binary(vc[0][2])))+Const(exp1(0,2), (Binary(vc[0][2])*Binary(vc[0][0])))+Const(exp1(0,2), (Binary(vc[0][2])*Binary(vc[0][1])))+Const(exp1(1,0), (Binary(vc[1][0])*Binary(vc[1][1])))+Const(exp1(1,0), (Binary(vc[1][0])*Binary(vc[1][2])))+Const(exp1(1,1), (Binary(vc[1][1])*Binary(vc[1][0])))+Const(exp1(1,1), (Binary(vc[1][1])*Binary(vc[1][2])))+Const(exp1(1,2), (Binary(vc[1][2])*Binary(vc[1][0])))+Const(exp1(1,2), (Binary(vc[1][2])*Binary(vc[1][1])))+Const(exp1(2,0), (Binary(vc[2][0])*Binary(vc[2][1])))+Const(exp1(2,0), (Binary(vc[2][0])*Binary(vc[2][2])))+Const(exp1(2,1), (Binary(vc[2][1])*Binary(vc[2][0])))+Const(exp1(2,1), (Binary(vc[2][1])*Binary(vc[2][2])))+Const(exp1(2,2), (Binary(vc[2][2])*Binary(vc[2][0])))+Const(exp1(2,2), (Binary(vc[2][2])*Binary(vc[2][1])))+Const(exp1(3,0), (Binary(vc[3][0])*Binary(vc[3][1])))+Const(exp1(3,0), (Binary(vc[3][0])*Binary(vc[3][2])))+Const(exp1(3,1), (Binary(vc[3][1])*Binary(vc[3][0])))+Const(exp1(3,1), (Binary(vc[3][1])*Binary(vc[3][2])))+Const(exp1(3,2), (Binary(vc[3][2])*Binary(vc[3][0])))+Const(exp1(3,2), (Binary(vc[3][2])*Binary(vc[3][1]))))*Num(18.0000035))))
--------------------------------------------------------------------
2nd expression:
--------------------------------------------------------------------
(Const(exp2(0,0), ((Binary(vc[0][0])*Num(-1))+Num(1)))+Const(exp2(0,1), ((Binary(vc[0][1])*Num(-1))+Num(1)))+Const(exp2(0,2), ((Binary(vc[0][2])*Num(-1))+Num(1)))+Const(exp2(1,0), ((Binary(vc[1][0])*Num(-1))+Num(1)))+Const(exp2(1,1), ((Binary(vc[1][1])*Num(-1))+Num(1)))+Const(exp2(1,2), ((Binary(vc[1][2])*Num(-1))+Num(1)))+Const(exp2(2,0), ((Binary(vc[2][0])*Num(-1))+Num(1)))+Const(exp2(2,1), ((Binary(vc[2][1])*Num(-1))+Num(1)))+Const(exp2(2,2), ((Binary(vc[2][2])*Num(-1))+Num(1)))+Const(exp2(3,0), ((Binary(vc[3][0])*Num(-1))+Num(1)))+Const(exp2(3,1), ((Binary(vc[3][1])*Num(-1))+Num(1)))+Const(exp2(3,2), ((Binary(vc[3][2])*Num(-1))+Num(1)))+Const(exp2(3,2), ((Const(exp2(0,0), ((Binary(vc[0][0])*Num(-1))+Num(1)))+Const(exp2(0,1), ((Binary(vc[0][1])*Num(-1))+Num(1)))+Const(exp2(0,2), ((Binary(vc[0][2])*Num(-1))+Num(1)))+Const(exp2(1,0), ((Binary(vc[1][0])*Num(-1))+Num(1)))+Const(exp2(1,1), ((Binary(vc[1][1])*Num(-1))+Num(1)))+Const(exp2(1,2), ((Binary(vc[1][2])*Num(-1))+Num(1)))+Const(exp2(2,0), ((Binary(vc[2][0])*Num(-1))+Num(1)))+Const(exp2(2,1), ((Binary(vc[2][1])*Num(-1))+Num(1)))+Const(exp2(2,2), ((Binary(vc[2][2])*Num(-1))+Num(1)))+Const(exp2(3,0), ((Binary(vc[3][0])*Num(-1))+Num(1)))+Const(exp2(3,1), ((Binary(vc[3][1])*Num(-1))+Num(1)))+Const(exp2(3,2), ((Binary(vc[3][2])*Num(-1))+Num(1))))*Num(3.0000005))))
--------------------------------------------------------------------
3rd expression:
--------------------------------------------------------------------
(Const(exp3(0,0), ((Binary(vc[0][0])*Binary(vc[1][0]))*Num(1)))+Const(exp3(0,0), ((Binary(vc[0][0])*Binary(vc[2][0]))*Num(0)))+Const(exp3(0,1), ((Binary(vc[0][1])*Binary(vc[1][1]))*Num(1)))+Const(exp3(0,1), ((Binary(vc[0][1])*Binary(vc[2][1]))*Num(0)))+Const(exp3(0,2), ((Binary(vc[0][2])*Binary(vc[1][2]))*Num(1)))+Const(exp3(0,2), ((Binary(vc[0][2])*Binary(vc[2][2]))*Num(0)))+Const(exp3(1,0), ((Binary(vc[1][0])*Binary(vc[0][0]))*Num(1)))+Const(exp3(1,0), ((Binary(vc[1][0])*Binary(vc[2][0]))*Num(1)))+Const(exp3(1,1), ((Binary(vc[1][1])*Binary(vc[0][1]))*Num(1)))+Const(exp3(1,1), ((Binary(vc[1][1])*Binary(vc[2][1]))*Num(1)))+Const(exp3(1,2), ((Binary(vc[1][2])*Binary(vc[0][2]))*Num(1)))+Const(exp3(1,2), ((Binary(vc[1][2])*Binary(vc[2][2]))*Num(1)))+Const(exp3(2,0), ((Binary(vc[2][0])*Binary(vc[0][0]))*Num(0)))+Const(exp3(2,0), ((Binary(vc[2][0])*Binary(vc[1][0]))*Num(1)))+Const(exp3(2,1), ((Binary(vc[2][1])*Binary(vc[0][1]))*Num(0)))+Const(exp3(2,1), ((Binary(vc[2][1])*Binary(vc[1][1]))*Num(1)))+Const(exp3(2,2), ((Binary(vc[2][2])*Binary(vc[0][2]))*Num(0)))+Const(exp3(2,2), ((Binary(vc[2][2])*Binary(vc[1][2]))*Num(1)))+Const(exp3(3,0), ((Binary(vc[3][0])*Binary(vc[0][0]))*Num(0)))+Const(exp3(3,0), ((Binary(vc[3][0])*Binary(vc[1][0]))*Num(1)))+Const(exp3(3,0), ((Binary(vc[3][0])*Binary(vc[2][0]))*Num(1)))+Const(exp3(3,1), ((Binary(vc[3][1])*Binary(vc[0][1]))*Num(0)))+Const(exp3(3,1), ((Binary(vc[3][1])*Binary(vc[1][1]))*Num(1)))+Const(exp3(3,1), ((Binary(vc[3][1])*Binary(vc[2][1]))*Num(1)))+Const(exp3(3,2), ((Binary(vc[3][2])*Binary(vc[0][2]))*Num(0)))+Const(exp3(3,2), ((Binary(vc[3][2])*Binary(vc[1][2]))*Num(1)))+Const(exp3(3,2), ((Binary(vc[3][2])*Binary(vc[2][2]))*Num(1)))+Const(exp3(3,2), ((Const(exp3(0,0), ((Binary(vc[0][0])*Binary(vc[1][0]))*Num(1)))+Const(exp3(0,0), ((Binary(vc[0][0])*Binary(vc[2][0]))*Num(0)))+Const(exp3(0,1), ((Binary(vc[0][1])*Binary(vc[1][1]))*Num(1)))+Const(exp3(0,1), ((Binary(vc[0][1])*Binary(vc[2][1]))*Num(0)))+Const(exp3(0,2), ((Binary(vc[0][2])*Binary(vc[1][2]))*Num(1)))+Const(exp3(0,2), ((Binary(vc[0][2])*Binary(vc[2][2]))*Num(0)))+Const(exp3(1,0), ((Binary(vc[1][0])*Binary(vc[0][0]))*Num(1)))+Const(exp3(1,0), ((Binary(vc[1][0])*Binary(vc[2][0]))*Num(1)))+Const(exp3(1,1), ((Binary(vc[1][1])*Binary(vc[0][1]))*Num(1)))+Const(exp3(1,1), ((Binary(vc[1][1])*Binary(vc[2][1]))*Num(1)))+Const(exp3(1,2), ((Binary(vc[1][2])*Binary(vc[0][2]))*Num(1)))+Const(exp3(1,2), ((Binary(vc[1][2])*Binary(vc[2][2]))*Num(1)))+Const(exp3(2,0), ((Binary(vc[2][0])*Binary(vc[0][0]))*Num(0)))+Const(exp3(2,0), ((Binary(vc[2][0])*Binary(vc[1][0]))*Num(1)))+Const(exp3(2,1), ((Binary(vc[2][1])*Binary(vc[0][1]))*Num(0)))+Const(exp3(2,1), ((Binary(vc[2][1])*Binary(vc[1][1]))*Num(1)))+Const(exp3(2,2), ((Binary(vc[2][2])*Binary(vc[0][2]))*Num(0)))+Const(exp3(2,2), ((Binary(vc[2][2])*Binary(vc[1][2]))*Num(1)))+Const(exp3(3,0), ((Binary(vc[3][0])*Binary(vc[0][0]))*Num(0)))+Const(exp3(3,0), ((Binary(vc[3][0])*Binary(vc[1][0]))*Num(1)))+Const(exp3(3,0), ((Binary(vc[3][0])*Binary(vc[2][0]))*Num(1)))+Const(exp3(3,1), ((Binary(vc[3][1])*Binary(vc[0][1]))*Num(0)))+Const(exp3(3,1), ((Binary(vc[3][1])*Binary(vc[1][1]))*Num(1)))+Const(exp3(3,1), ((Binary(vc[3][1])*Binary(vc[2][1]))*Num(1)))+Const(exp3(3,2), ((Binary(vc[3][2])*Binary(vc[0][2]))*Num(0)))+Const(exp3(3,2), ((Binary(vc[3][2])*Binary(vc[1][2]))*Num(1)))+Const(exp3(3,2), ((Binary(vc[3][2])*Binary(vc[2][2]))*Num(1))))*Num(3.0000005))))
Array([Binary(c[0]), Binary(c[1]), Binary(c[2])])
--------------------------------------------------------------------
4th expression:
--------------------------------------------------------------------
(Const(exp4(0,0), (Binary(vc[0][0])*((Binary(c[0])*Num(-1))+Num(1))))+Const(exp4(0,1), (Binary(vc[0][1])*((Binary(c[1])*Num(-1))+Num(1))))+Const(exp4(0,2), (Binary(vc[0][2])*((Binary(c[2])*Num(-1))+Num(1))))+Const(exp4(1,0), (Binary(vc[1][0])*((Binary(c[0])*Num(-1))+Num(1))))+Const(exp4(1,1), (Binary(vc[1][1])*((Binary(c[1])*Num(-1))+Num(1))))+Const(exp4(1,2), (Binary(vc[1][2])*((Binary(c[2])*Num(-1))+Num(1))))+Const(exp4(2,0), (Binary(vc[2][0])*((Binary(c[0])*Num(-1))+Num(1))))+Const(exp4(2,1), (Binary(vc[2][1])*((Binary(c[1])*Num(-1))+Num(1))))+Const(exp4(2,2), (Binary(vc[2][2])*((Binary(c[2])*Num(-1))+Num(1))))+Const(exp4(3,0), (Binary(vc[3][0])*((Binary(c[0])*Num(-1))+Num(1))))+Const(exp4(3,1), (Binary(vc[3][1])*((Binary(c[1])*Num(-1))+Num(1))))+Const(exp4(3,2), (Binary(vc[3][2])*((Binary(c[2])*Num(-1))+Num(1))))+Const(exp4(3,2), ((Const(exp4(0,0), (Binary(vc[0][0])*((Binary(c[0])*Num(-1))+Num(1))))+Const(exp4(0,1), (Binary(vc[0][1])*((Binary(c[1])*Num(-1))+Num(1))))+Const(exp4(0,2), (Binary(vc[0][2])*((Binary(c[2])*Num(-1))+Num(1))))+Const(exp4(1,0), (Binary(vc[1][0])*((Binary(c[0])*Num(-1))+Num(1))))+Const(exp4(1,1), (Binary(vc[1][1])*((Binary(c[1])*Num(-1))+Num(1))))+Const(exp4(1,2), (Binary(vc[1][2])*((Binary(c[2])*Num(-1))+Num(1))))+Const(exp4(2,0), (Binary(vc[2][0])*((Binary(c[0])*Num(-1))+Num(1))))+Const(exp4(2,1), (Binary(vc[2][1])*((Binary(c[1])*Num(-1))+Num(1))))+Const(exp4(2,2), (Binary(vc[2][2])*((Binary(c[2])*Num(-1))+Num(1))))+Const(exp4(3,0), (Binary(vc[3][0])*((Binary(c[0])*Num(-1))+Num(1))))+Const(exp4(3,1), (Binary(vc[3][1])*((Binary(c[1])*Num(-1))+Num(1))))+Const(exp4(3,2), (Binary(vc[3][2])*((Binary(c[2])*Num(-1))+Num(1)))))*Num(3.0000005))))
--------------------------------------------------------------------
5th expression:
--------------------------------------------------------------------
(Const(exp50, Binary(c[0]))+Const(exp51, Binary(c[1]))+Const(exp52, Binary(c[2])))
--------------------------------------------------------------------

QUBO:

--------------------------------------------------------------------
{('vc[0][0]', 'vc[0][1]'): 38.000007, ('vc[0][0]', 'vc[0][2]'): 38.000007, ('vc[0][0]', 'vc[1][0]'): 8.000001000000001, ('vc[0][0]', 'vc[2][0]'): 0.0, ('vc[0][0]', 'vc[3][0]'): 0.0, ('c[0]', 'vc[0][0]'): -4.0000005000000005, ('vc[0][1]', 'vc[0][2]'): 38.000007, ('vc[0][1]', 'vc[1][1]'): 8.000001000000001, ('vc[0][1]', 'vc[2][1]'): 0.0, ('vc[0][1]', 'vc[3][1]'): 0.0, ('c[1]', 'vc[0][1]'): -4.0000005000000005, ('vc[0][2]', 'vc[1][2]'): 8.000001000000001, ('vc[0][2]', 'vc[2][2]'): 0.0, ('vc[0][2]', 'vc[3][2]'): 0.0, ('c[2]', 'vc[0][2]'): -4.0000005000000005, ('vc[1][0]', 'vc[1][1]'): 38.000007, ('vc[1][0]', 'vc[1][2]'): 38.000007, ('vc[1][0]', 'vc[2][0]'): 8.000001000000001, ('vc[1][0]', 'vc[3][0]'): 4.0000005000000005, ('c[0]', 'vc[1][0]'): -4.0000005000000005, ('vc[1][1]', 'vc[1][2]'): 38.000007, ('vc[1][1]', 'vc[2][1]'): 8.000001000000001, ('vc[1][1]', 'vc[3][1]'): 4.0000005000000005, ('c[1]', 'vc[1][1]'): -4.0000005000000005, ('vc[1][2]', 'vc[2][2]'): 8.000001000000001, ('vc[1][2]', 'vc[3][2]'): 4.0000005000000005, ('c[2]', 'vc[1][2]'): -4.0000005000000005, ('vc[2][0]', 'vc[2][1]'): 38.000007, ('vc[2][0]', 'vc[2][2]'): 38.000007, ('vc[2][0]', 'vc[3][0]'): 4.0000005000000005, ('c[0]', 'vc[2][0]'): -4.0000005000000005, ('vc[2][1]', 'vc[2][2]'): 38.000007, ('vc[2][1]', 'vc[3][1]'): 4.0000005000000005, ('c[1]', 'vc[2][1]'): -4.0000005000000005, ('vc[2][2]', 'vc[3][2]'): 4.0000005000000005, ('c[2]', 'vc[2][2]'): -4.0000005000000005, ('vc[3][0]', 'vc[3][1]'): 38.000007, ('vc[3][0]', 'vc[3][2]'): 38.000007, ('c[0]', 'vc[3][0]'): -4.0000005000000005, ('vc[3][1]', 'vc[3][2]'): 38.000007, ('c[1]', 'vc[3][1]'): -4.0000005000000005, ('c[2]', 'vc[3][2]'): -4.0000005000000005, ('vc[0][0]', 'vc[0][0]'): 0.0, ('vc[0][1]', 'vc[0][1]'): 0.0, ('vc[0][2]', 'vc[0][2]'): 0.0, ('vc[1][0]', 'vc[1][0]'): 0.0, ('vc[1][1]', 'vc[1][1]'): 0.0, ('vc[1][2]', 'vc[1][2]'): 0.0, ('vc[2][0]', 'vc[2][0]'): 0.0, ('vc[2][1]', 'vc[2][1]'): 0.0, ('vc[2][2]', 'vc[2][2]'): 0.0, ('vc[3][0]', 'vc[3][0]'): 0.0, ('vc[3][1]', 'vc[3][1]'): 0.0, ('vc[3][2]', 'vc[3][2]'): 0.0, ('c[0]', 'c[0]'): 1.0, ('c[1]', 'c[1]'): 1.0, ('c[2]', 'c[2]'): 1.0}
--------------------------------------------------------------------

CLASSICAL RESULTS:

--------------------------------------------------------------------
{'c[0]': 1, 'c[1]': 1, 'c[2]': 1, 'vc[0][0]': 0, 'vc[0][1]': 0, 'vc[0][2]': 1, 'vc[1][0]': 0, 'vc[1][1]': 1, 'vc[1][2]': 0, 'vc[2][0]': 1, 'vc[2][1]': 0, 'vc[2][2]': 0, 'vc[3][0]': 0, 'vc[3][1]': 0, 'vc[3][2]': 1}
number of broken constraint = 12
--------------------------------------------------------------------

TIME (sec):

--------------------------------------------------------------------
12.868401050567627
